import java.lang.annotation.*;
import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.*;

record Employee(int id, String name, double salary) {}

@FunctionalInterface
interface Calculator {
    int calculate(int a, int b);
}

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
@interface Info {
    String author();
    String date();
}

public class AdvancedJava {
    public static void main(String[] args) {
        System.out.println("=== Advanced Java Concepts ===");

        // 1. Records
        Employee emp = new Employee(1, "John Doe", 50000.00);
        System.out.println("Record: " + emp.name() + ", Salary: $" + emp.salary());

        // 2. Functional Interfaces and Lambda Expressions
        Calculator add = (a, b) -> a + b;
        Calculator multiply = (a, b) -> a * b;
        System.out.println("Addition: " + add.calculate(5, 10));
        System.out.println("Multiplication: " + multiply.calculate(5, 10));

        // 3. Streams API
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David", "Eve");
        List<String> filteredNames = names.stream()
            .filter(name -> name.startsWith("A") || name.startsWith("E"))
            .map(String::toUpperCase)
            .sorted()
            .collect(Collectors.toList());
        System.out.println("Filtered Names: " + filteredNames);

        // 4. Optional
        Optional<String> optionalName = Optional.of("Jane Doe");
        optionalName.ifPresent(name -> System.out.println("Optional Value: " + name));
        System.out.println("Optional orElse: " + optionalName.orElse("Default Name"));

        // 5. Multithreading
        ExecutorService executor = Executors.newFixedThreadPool(2);
        Runnable task1 = () -> System.out.println("Task 1 executed by " + Thread.currentThread().getName());
        Runnable task2 = () -> System.out.println("Task 2 executed by " + Thread.currentThread().getName());
        executor.submit(task1);
        executor.submit(task2);
        executor.shutdown();

        // 6. Reflection
        Class<?> cls = AdvancedJava.class;
        Method[] methods = cls.getDeclaredMethods();
        System.out.println("Methods in AdvancedJava class:");
        for (Method method : methods) {
            System.out.println("- " + method.getName());
            if (method.isAnnotationPresent(Info.class)) {
                Info info = method.getAnnotation(Info.class);
                System.out.println("  Author: " + info.author());
                System.out.println("  Date: " + info.date());
            }
        }

        // 7. Annotations Example
        new AdvancedJava().annotatedMethod();

        // 8. Parallel Streams
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);
        int sum = numbers.parallelStream()
            .mapToInt(Integer::intValue)
            .sum();
        System.out.println("Sum of numbers (Parallel Stream): " + sum);
    }

    // Annotated Method
    @Info(author = "Jane Doe", date = "2024-12-26")
    public void annotatedMethod() {
        System.out.println("Annotated Method Executed");
    }
}