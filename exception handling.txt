import java.io.*;

// Custom Exception Class
class CustomException extends Exception {
    public CustomException(String message) {
        super(message);
    }
}

public class ExceptionHandlingDemo {
    public static void main(String[] args) {
        System.out.println("Program starts...");

        // 1. Basic Try-Catch
        try {
            int result = 10 / 0; // ArithmeticException
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Caught ArithmeticException: " + e.getMessage());
        }

        // 2. Multiple Catch Blocks
        try {
            int[] numbers = {1, 2, 3};
            System.out.println(numbers[5]); // ArrayIndexOutOfBoundsException
        } catch (ArithmeticException e) {
            System.out.println("This block won't execute.");
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Caught ArrayIndexOutOfBoundsException: " + e.getMessage());
        }

        // 3. Throwing and Catching a Custom Exception
        try {
            validateAge(15); // This will throw a CustomException
        } catch (CustomException e) {
            System.out.println("Caught CustomException: " + e.getMessage());
        }

        // 4. Nested Try-Catch
        try {
            try {
                String str = null;
                System.out.println(str.length()); // NullPointerException
            } catch (NullPointerException e) {
                System.out.println("Caught NullPointerException inside nested try.");
            }
            int result = 10 / 0; // ArithmeticException
        } catch (ArithmeticException e) {
            System.out.println("Caught ArithmeticException in outer try: " + e.getMessage());
        }

        // 5. Try-with-Resources
        try (BufferedReader reader = new BufferedReader(new FileReader("example.txt"))) {
            String line = reader.readLine();
            System.out.println("File content: " + line);
        } catch (IOException e) {
            System.out.println("Caught IOException: " + e.getMessage());
        }

        // 6. Finally Block
        try {
            int number = Integer.parseInt("123a"); // NumberFormatException
        } catch (NumberFormatException e) {
            System.out.println("Caught NumberFormatException: " + e.getMessage());
        } finally {
            System.out.println("This is the finally block, always executes.");
        }

        System.out.println("Program ends.");
    }

    // Method to demonstrate throwing a custom exception
    public static void validateAge(int age) throws CustomException {
        if (age < 18) {
            throw new CustomException("Age must be 18 or above to proceed.");
        } else {
            System.out.println("Age validated successfully.");
        }
    }
}